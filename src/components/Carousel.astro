---
import ArrowLeft from "@components/icons/ArrowLeft.astro";
import ArrowRigth from "@components/icons/ArrowRigth.astro";
import type { CARD } from "@components/Interfaces/InterfaceCard";
import InfoCard from "./InfoCard.astro";
import type { Code, Debug } from "astro:components";

interface Props {
  CARDS: CARD[],
  len: string
}
const {CARDS, len} = Astro.props;
---

<div class=`w-[948px] relative mx-auto`>
  <div class="overflow-hidden">
    <div class=`${len} flex gap-3`>
      {CARDS.map((card) => <InfoCard {...card} />)}
    </div>
    <ArrowLeft />
    <ArrowRigth />
  </div>
</div>

<script>
  let arrows = document.querySelectorAll(".arrow-left , .arrow-right");
  let currentPosition = 0;
  arrows.forEach((arrow) => {
    arrow.addEventListener("click", () => {
      let carousel = (arrow as HTMLDivElement).parentNode
        ?.firstElementChild as HTMLDivElement;
      if (arrow.classList.contains("arrow-right")) {
        if (currentPosition == -948) {
          let newElement = carousel?.firstElementChild;
          carousel?.appendChild(newElement as HTMLDivElement);
          currentPosition += 316;
          carousel.style.transition = "none";
          carousel.style.transform = `translateX(${currentPosition}px)`;
          setTimeout(() => {
            currentPosition -= 316;
            carousel.style.transition = "transform .5s linear";
            carousel.style.transform = `translateX(${currentPosition}px)`;
          }, 0);
        } else {
          currentPosition -= 316;
          carousel.style.transition = "transform .5s linear";
          carousel.style.transform = `translateX(${currentPosition}px)`;
        }
      } else if (arrow.classList.contains("arrow-left")) {
        if (currentPosition == 0) {
          let newElement = carousel?.lastElementChild;
          carousel?.prepend(newElement as HTMLDivElement);
          currentPosition -= 316;
          carousel.style.transition = "none";
          carousel.style.transform = `translateX(${currentPosition}px)`;
          setTimeout(() => {
            currentPosition += 316;
            carousel.style.transition = "transform .5s linear";
            carousel.style.transform = `translateX(${currentPosition}px)`;
          }, 0);
        } else {
          currentPosition += 316;
          carousel.style.transition = "transform .5s linear";
          carousel.style.transform = `translateX(${currentPosition}px)`;
        }
      }
    });
  });
</script>
